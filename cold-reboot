#!/usr/bin/python

# Copyright (c) 2019 Bartosz Lipinski (blipinsk)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys

from time import sleep

def verify_python_version():
    major = sys.version_info[0]
    minor = sys.version_info[1]

    if (major < 2) or (major == 2 and minor < 7) :
        raise Exception("Must be using Python >=2.7")

def get_running_emulator_names():
    devices = check_output(["adb", "devices"]).split('\n')

    def only_emulator_rows(device):
        if "emulator" in device:
            return True
        else:
            return False

    def to_emulator_name(emulator_row):
        name_End = emulator_row.index('\t')
        return emulator_row[:name_End]

    emulator_rows = filter(only_emulator_rows, devices)
    return map(to_emulator_name, emulator_rows)

def map_to_emulator_info(running_emulators):
    def to_emulator_info(emulator):
        return EmulatorInfo(emulator)

    return map(to_emulator_info, running_emulators)

def cold_reboot_emulators(running_avd_emulators):
    FNULL = open(os.devnull, 'w')

    for emu in running_avd_emulators:
        print("Emulator found: " + emu.emulator_name + " "+ emu.avd_name)
        Popen(["adb", "-s", emu.emulator_name, "emu", "kill"], stdout=FNULL, stderr=STDOUT)
        print("Cold rebooting...")
        sleep(1.0) #we're waiting for killing emulators
        Popen(["emulator", "@" + emu.avd_name, "-no-snapshot-load"], stdout=FNULL, stderr=STDOUT)


class EmulatorInfo:

    def __init__(self, emulator_name):
        self.emulator_name = emulator_name
        self.avd_name = self.resolve_avd_name()

    def resolve_avd_name(self):
        def only_avd_name(avd_name_row):
            if avd_name_row=='OK':
                return False
            else:
                return True

        avd_name_rows = check_output(["adb", "-s", self.emulator_name, "emu", "avd", "name"]).strip().split('\n')
        return filter(only_avd_name, avd_name_rows)[0].strip()

# ------------

verify_python_version()

from subprocess import check_output, Popen, PIPE, STDOUT

running_emulators = get_running_emulator_names()
running_avd_emulators = map_to_emulator_info(running_emulators)
cold_reboot_emulators(running_avd_emulators)
